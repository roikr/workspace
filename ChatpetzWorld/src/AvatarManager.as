package {	import com.smartfoxserver.openspace.components.flash.OpenSpace;	import com.smartfoxserver.openspace.engine.model.avatar.AvatarCreationParams;	import com.smartfoxserver.openspace.shared.model.other.Position3D;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	/**	 * This class:	 * - controls all the avatar-related operations (creation, skin change, etc)	 * - controls the avatars library loading	 */	public class AvatarManager	{		private var world:ChatpetzWorld			// Reference to the main application class		private var openSpace:OpenSpace	// Reference to OpenSpace instance		private var avatarControlsContainer:AvatarControlsContainer;						public function AvatarManager(world:ChatpetzWorld, openSpace:OpenSpace)		{			this.world = world			this.openSpace = openSpace						avatarControlsContainer = new AvatarControlsContainer()			//world.addChild(avatarControlsContainer)			avatarControlsContainer.bt_send.addEventListener(MouseEvent.CLICK, onSendMessageBtClick)			avatarControlsContainer.bt_teleportAvatar.addEventListener(MouseEvent.CLICK, onTeleportBtClick)			avatarControlsContainer.bt_moveAvatar.addEventListener(MouseEvent.CLICK, onMoveBtClick)			avatarControlsContainer.bt_stopAvatar.addEventListener(MouseEvent.CLICK, onStopBtClick)			avatarControlsContainer.bt_changeSkin.addEventListener(MouseEvent.CLICK, onChangeSkinBtClick)			avatarControlsContainer.bt_setAnimTime.addEventListener(MouseEvent.CLICK, onSetAnimTimeBtClick)		 			avatarControlsContainer.y = 800;		}				/**		 * Load avatars external library SFW file.		 * IMPORTANT: the Application Domain in which the library is loaded must have the current domain as its parent		 * 		 * As this method is called during main application initialization, it enables the login button as soon as the library is loaded.		 * On loading completion, the destination application domain is passed to OpenSpace instance.		 */		public function loadAvatarsLibrary():void		{			// Create new application domain			openSpace.avatarAppDomain = new ApplicationDomain(ApplicationDomain.currentDomain)						var loader:Loader = new Loader()			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadCompletion, false, 0, true)			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onLoadError, false, 0, true)							//var request:URLRequest = new URLRequest("libraries/AvatarsContainer.swf")			var request:URLRequest = new URLRequest("avatar/ChatpetzAvatars.swf")			var context:LoaderContext = new LoaderContext(false, openSpace.avatarAppDomain)			loader.load(request, context)		}				/**		 * Create the player's avatar.		 */		public function createPlayerAvatar(centeringCoords:Point, direction:int):void		{			var params:AvatarCreationParams = new AvatarCreationParams()			params.type = "chatpet"			//params.skin = generateSkin()			params.centerViewport = true						if (centeringCoords != null)			{				params.px = centeringCoords.x				params.py = centeringCoords.y				params.direction = direction			}						try {				openSpace.createMyAvatar(params)			}			catch (e:Error) {				world.logTrace("AVATAR CREATION ERROR: " + e.message)			}		}				/**		 * Create the player's avatar skin.		 */		public function changePlayerAvatarSkin(chatpet:String):void		{			//var isMale:Boolean = main.avatarControlsContainer.rb_male.selected			var skin:Object = {}			skin.chatpet = chatpet;						openSpace.setMyAvatarSkin(skin)		}				/**		 * Teleport the player's avatar.		 */		public function teleportPlayerAvatar():void		{			openSpace.teleportMyAvatar(new Position3D(avatarControlsContainer.ns_px.value, avatarControlsContainer.ns_py.value))		}				/**		 * Move the player's avatar.		 */		public function movePlayerAvatar():void		{			openSpace.moveMyAvatar(new Position3D(avatarControlsContainer.ns_px.value, avatarControlsContainer.ns_py.value))		}				/**		 * Stop the player's avatar during its movement.		 */		public function stopPlayerAvatar():void		{			openSpace.stopMyAvatar()		}				/**		 * Set the player's avatar animation time (speed).		 */		public function setPlayerAvatarAnimTime():void		{			openSpace.setMyAvatarAnimationTime(avatarControlsContainer.ns_animTime.value)		}				//-----------------------------		// PRIVATE METHODS		//-----------------------------				private function onLoadCompletion(e:Event):void		{			world.logTrace("Avatars external library loaded")						// Enable login button			//world.bt_login.enabled = true		}				private function onLoadError(e:IOErrorEvent):void		{			world.logTrace(e.text)		}												private function onSendMessageBtClick(e:MouseEvent):void		{			//if (avatarControlsContainer.ti_message.text != "")			//	smartFox.sendPublicMessage(avatarControlsContainer.ti_message.text)						//avatarControlsContainer.ti_message.text = ""		}				private function onChangeSkinBtClick(e:MouseEvent):void		{			//changePlayerAvatarSkin()		}				private function onTeleportBtClick(e:MouseEvent):void		{			teleportPlayerAvatar()		}				private function onMoveBtClick(e:MouseEvent):void		{			movePlayerAvatar()		}				private function onStopBtClick(e:MouseEvent):void		{			stopPlayerAvatar()		}				private function onSetAnimTimeBtClick(e:MouseEvent):void		{			setPlayerAvatarAnimTime()		}					}}