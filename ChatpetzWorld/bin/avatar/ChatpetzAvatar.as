package{	import com.smartfoxserver.openspace.engine.model.avatar.Avatar;	import com.smartfoxserver.openspace.shared.view.items.Tile;	import com.smartfoxserver.openspace.shared.model.constants.MapDirections;		import flash.geom.Rectangle;	import flash.display.*; // This import is required or Flash CS3 won't be able to compile; no issues with CS4 instead	import flash.utils.getDefinitionByName;	public class ChatpetzAvatar extends Avatar	{		private const ANIM_STAND:String = "stand"		private const ANIM_WALK:String = "walk"		private const DIRECTIONS:Array = ["N","NE","E","SE","S","SW","W","NW"]		private const X_OFFSET:int = 0		private const Y_OFFSET:int = 0				private var initialized:Boolean = false		private var isMoving:Boolean = false				private var _isEditing:Boolean		private var _direction:int		private var _skin:Object		private var _state:Object				// Avatar parts		private var chatpetMC:MovieClip						public function ChatpetzAvatar()		{					}				override public function get isEditing():Boolean		{			return _isEditing		}				override public function set isEditing(value:Boolean):void		{			_isEditing = value						// Change alpha value to show that the user is ucerrently editing a map			this.alpha = (_isEditing ? 0.5 : 1)		}				override public function get direction():int		{			return _direction		}				override public function set direction(value:int):void		{			_direction = value						if (initialized)				setDirection()		}				override public function get skin():Object		{			return _skin		}				override public function set skin(data:Object):void		{			//trace("ExampleAvatar: skin set to", data)						_skin = data						if (initialized)				drawAvatar()		}				override public function get state():Object		{			return _state		}				override public function set state(data:Object):void		{			//trace("ExampleAvatar: state set to", data)						_state = data		}				override public function init():void		{			//trace("ExampleAvatar: init method called")						// Show player's avatar indicator			myAvatarSymbol.visible = this.isMyAvatar						// Set avatar's control area			this.controlAreaWidth = 24						// Set avatar's default skin			if (skin == null)			{				var defaultSkin:Object = {}				defaultSkin.chatpet = "Piff"				skin = defaultSkin			}						// Draw avatar			drawAvatar()						initialized = true		}				override public function destroy():void		{			//trace("ExampleAvatar: destroy method called")		}				override public function onMovementStart(tile:Tile, triggers:Array):void		{			//trace("ExampleAvatar: onMovementStart method called")						isMoving = true			drawAvatar()		}				override public function onMovementPause():void		{			//trace("ExampleAvatar: onMovementPause method called")		}				override public function onMovementResume():void		{			//trace("ExampleAvatar: onMovementResume method called")		}				override public function onMovementStop(tile:Tile, triggers:Array):void		{			//trace("ExampleAvatar: onMovementStop method called")						isMoving = false			drawAvatar()		}				override public function onEnterTile(tile:Tile, triggers:Array):void		{			//trace("ExampleAvatar: onEnterTile method called")		}				override public function onLeaveTile(tile:Tile, triggers:Array):void		{			//trace("ExampleAvatar: onLeaveTile method called")		}				override public function onMessage(message:String, isPrivate:Boolean):void		{			//trace("ExampleAvatar: onMessage method called")		}				override public function onCustomAction(data:Object):void		{			//trace("ExampleAvatar: onCustomAction method called (data: " + data + ")")		}				private function drawAvatar():void		{						var chatpet:String = skin.chatpet									//--------------			// Display chatpet			//--------------			chatpetMC = setupChatpet(chatpetMC, chatpet)						chatpetMC.gotoAndPlay(isMoving ? "walk" : "idle");									// Set direction			setDirection()					}				private function setupChatpet(currentChatpetMC:MovieClip, newClassName:String) : MovieClip {						var currentClassName:String = (currentChatpetMC != null ? currentChatpetMC.name : "")						if (currentClassName != "" && currentClassName != newClassName)				removeChild(currentChatpetMC)						var mc:MovieClip									if (currentClassName != newClassName)			{				var clazz:Class = getDefinitionByName(newClassName) as Class				mc = new clazz() as MovieClip								mc.name = newClassName				mc.x = X_OFFSET				mc.y = Y_OFFSET								addChild(mc)			}			else				mc = currentChatpetMC									return mc		}										private function setDirection():void		{			/*			var dirLabel:String = DIRECTIONS[_direction]						// NOTE: currentLabel is used to determine if the avatar part is already in the required direction						if (bodyMC != null && bodyMC.currentLabel != dirLabel)				bodyMC.gotoAndPlay(dirLabel)						if (legsMC != null && legsMC.currentLabel != dirLabel)				legsMC.gotoAndPlay(dirLabel)						if (bustMC != null && bustMC.currentLabel != dirLabel)				bustMC.gotoAndPlay(dirLabel)						if (hairMC != null && hairMC.currentLabel != dirLabel)				hairMC.gotoAndPlay(dirLabel)			*/						switch (_direction) {				case MapDirections.WEST:				case MapDirections.NORTH_WEST:				case MapDirections.SOUTH_WEST:					chatpetMC.scaleX = -1;					break;				case MapDirections.EAST:				case MapDirections.NORTH_EAST:				case MapDirections.SOUTH_EAST:					chatpetMC.scaleX = 1;					break;				default:					break;			}		}	}}